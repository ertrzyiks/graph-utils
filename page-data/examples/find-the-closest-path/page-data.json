{"componentChunkName":"component---src-templates-example-page-tsx","path":"/examples/find-the-closest-path","result":{"data":{"allFile":{"edges":[{"node":{"name":"01-add-node"}},{"node":{"name":"02-add-node-with-data"}},{"node":{"name":"03-add-edge"}},{"node":{"name":"04-add-edge-with-data"}},{"node":{"name":"05-find-the-closest-path"}}]}},"pageContext":{"exampleName":"05-find-the-closest-path","content":"import { findClosestPaths, retrieveClosestPath } from '@ertrzyiks/graph-utils'\n\nconst results = findClosestPaths(graph, {\n  from: '1',\n  getDistance: edge => edge.weight\n})\n\nfunction onNodeClick(id: string) {\n  return retrieveClosestPath(results, { to: id })\n}","fullContent":"import React, { useState } from 'react'\nimport ExampleGraph from '../components/ExampleGraph'\nimport Preview from '../components/Preview'\nimport { getAllNodeIds, Graph, addNodeInPlace, addEdgeInPlace } from '@ertrzyiks/graph-utils'\n\ninterface EdgeData {\n  weight: number\n}\n\nconst graph: Graph<{}, EdgeData> = {}\naddNodeInPlace(graph, { id: '1'})\naddNodeInPlace(graph, { id: '2'})\naddNodeInPlace(graph, { id: '3'})\naddNodeInPlace(graph, { id: '4'})\naddNodeInPlace(graph, { id: '5'})\naddEdgeInPlace(graph, { from: '1', to: '2', weight: 10 })\naddEdgeInPlace(graph, { from: '2', to: '3', weight: 15 })\naddEdgeInPlace(graph, { from: '1', to: '3', weight: 1 })\naddEdgeInPlace(graph, { from: '3', to: '4', weight: 2 })\naddEdgeInPlace(graph, { from: '1', to: '4', weight: 5 })\naddEdgeInPlace(graph, { from: '4', to: '5', weight: 6 })\naddEdgeInPlace(graph, { from: '1', to: '5', weight: 12 })\n\nimport { findClosestPaths, retrieveClosestPath } from '@ertrzyiks/graph-utils'\n\nconst results = findClosestPaths(graph, {\n  from: '1',\n  getDistance: edge => edge.weight\n})\n\nfunction onNodeClick(id: string) {\n  return retrieveClosestPath(results, { to: id })\n}\n\nconst Example = () => {\n  const [highlighted, setHighlighted] = useState<string[]|null>()\n  const ids = getAllNodeIds(graph)\n\n  const data = {\n    nodes: ids\n      .map(id => ({\n        id,\n        label: `Node#${id}`\n      }))\n      .map(node => {\n        if (highlighted && highlighted.includes(node.id)) {\n          return { ...node, color: { background: 'green' }, size: 12}\n        }\n\n        if (highlighted) {\n          return { ...node, opacity: 0.5 }\n        }\n\n        return node\n      }),\n    edges: ids\n      .map(id => Object.keys(graph[id].edges).map(to => ({ from: id, to, label: `${graph[id].edges[to].weight}` }))).flat(1)\n      .map(edge => {\n        if (highlighted) {\n          const indexOfFrom = highlighted?.indexOf(edge.from)\n          const indexOfTo = highlighted?.indexOf(edge.to)\n\n          if ((indexOfFrom + 1) === indexOfTo) {\n            return { ...edge, color: { color: 'green' }, width: 2 }\n          }\n        }\n\n        return edge\n      })\n  }\n\n  const handleClick = (id: string | null) => {\n    if (id) {\n      setHighlighted(onNodeClick(id))\n    } else {\n      setHighlighted(undefined)\n    }\n  }\n\n  return (\n    <Preview\n      raw={graph}\n      visual={<ExampleGraph data={data} onClick={handleClick} />}\n    />\n  )\n}\n\nexport default Example\n"}},"staticQueryHashes":["3649515864","63159454"]}
{"componentChunkName":"component---src-templates-api-page-tsx","path":"/api","result":{"data":{"allFunction":{"nodes":[{"name":"addEdgeInPlace","signature":"addEdgeInPlace(graph, edge): void","slug":"addEdgeInPlace","params":[{"name":"graph","type":"Graph<NodeData, EdgeData>"},{"name":"edge","type":"EdgeDefinition<EdgeData>"}],"jsDoc":{"comment":"Adds a new edge to the provided graph object by modifying it.","tags":[{"comment":"addEdgeInPlace(graph, edge): void","name":null,"type":null,"tagName":"signature"},{"comment":"Target graph object","name":"graph","type":"Graph","tagName":"param"},{"comment":"Edge definition","name":"edge","type":"EdgeDefinition","tagName":"param"},{"comment":"Id of the source node","name":"edge.from","type":"NodeId","tagName":"param"},{"comment":"Id of the target node","name":"edge.to","type":"NodeId","tagName":"param"},{"comment":"Custom properties of the edge","name":"edge.rest","type":"object","tagName":"param"},{"comment":"  addEdgeInPlace(graph, { from: '1', to: '2' })","name":null,"type":null,"tagName":"example"},{"comment":"  addEdgeInPlace(graph, { from: '1', to: '2', weight: 10 })","name":null,"type":null,"tagName":"example"}]}},{"name":"addNodeInPlace","signature":"addNodeInPlace(graph, node): void","slug":"addNodeInPlace","params":[{"name":"graph","type":"Graph<NodeData, EdgeData>"},{"name":"node","type":"NodeDefinition<NodeData>"}],"jsDoc":{"comment":"Adds a new node to the provided graph object by modifying it.","tags":[{"comment":"addNodeInPlace(graph, node): void","name":null,"type":null,"tagName":"signature"},{"comment":"Target graph object","name":"graph","type":"Graph","tagName":"param"},{"comment":"Node definition","name":"node","type":"NodeDefinition","tagName":"param"},{"comment":"Id of the node","name":"node.id","type":"NodeId","tagName":"param"},{"comment":"Custom properties of the node","name":"node.rest","type":"Record","tagName":"param"},{"comment":"  addNodeInPlace(graph, { id: '1' })","name":null,"type":null,"tagName":"example"},{"comment":"  addNodeInPlace(graph, { id: '1', label: 'The first node' })","name":null,"type":null,"tagName":"example"}]}},{"name":"assertNodeExists","signature":"assertNodeExists(graph, nodeId): void","slug":"assertNodeExists","params":[{"name":"graph","type":"Graph"},{"name":"nodeId","type":"NodeId"}],"jsDoc":{"comment":"Ensures that the provided graph object contains information about the given node.","tags":[{"comment":"assertNodeExists(graph, nodeId): void","name":null,"type":null,"tagName":"signature"},{"comment":"Object that should contain the node","name":"graph","type":"Graph","tagName":"param"},{"comment":"Id of the node for the lookup","name":"nodeId","type":"NodeId","tagName":"param"},{"comment":"  assertNodeExists(graph, '1')","name":null,"type":null,"tagName":"example"}]}},{"name":"assertResultForNodeExists","signature":"assertResultForNodeExists(results, nodeId): void","slug":"assertResultForNodeExists","params":[{"name":"results","type":"ClosestPathResults"},{"name":"nodeId","type":"NodeId"}],"jsDoc":{"comment":"Ensures that the provided closest path results object contains information about the given node.","tags":[{"comment":"assertResultForNodeExists(results, nodeId): void","name":null,"type":null,"tagName":"signature"},{"comment":"Object that should contain the node","name":"results","type":"ClosestPathResults","tagName":"param"},{"comment":"Id of the node for the lookup","name":"nodeId","type":"NodeId","tagName":"param"},{"comment":"  assertResultForNodeExists(results, '1')","name":null,"type":null,"tagName":"example"}]}},{"name":"cloneGraph","signature":"cloneGraph(graph): Graph","slug":"cloneGraph","params":[{"name":"graph","type":"Graph<NodeData, EdgeData>"}],"jsDoc":{"comment":"Creates a copy the graph. The new graph contains all the node and edges from the original graph.","tags":[{"comment":"cloneGraph(graph): Graph","name":null,"type":null,"tagName":"signature"},{"comment":"Target graph object to copy","name":"graph","type":"Graph","tagName":"param"},{"comment":"  const anotherGraph = cloneGraph(graph)","name":null,"type":null,"tagName":"example"}]}},{"name":"createGraph","signature":"createGraph(): Graph","slug":"createGraph","params":[],"jsDoc":{"comment":"Initializes an empty graph object without nodes and edges. The two generic parameters allows to constraint the\ntype of custom properties of nodes and edges. Those constraints are respected by other functions.","tags":[{"comment":"createGraph(): Graph","name":null,"type":null,"tagName":"signature"},{"comment":"A new instance of a graph","name":null,"type":"Graph","tagName":"return"},{"comment":"  const graph = createGraph()","name":null,"type":null,"tagName":"example"},{"comment":"  type NodeData = { label: string }\n  const graph = createGraph<NodeData>()","name":null,"type":null,"tagName":"example"},{"comment":"  type EdgeData = { weight: number }\n  const graph = createGraph<{}, EdgeData>()","name":null,"type":null,"tagName":"example"},{"comment":"  type NodeData = { label: string }\n  type EdgeData = { weight: number }\n  const graph = createGraph<NodeData, EdgeData>()","name":null,"type":null,"tagName":"example"}]}},{"name":"filterNodes","signature":"filterNodes(graph, predicateFn): Graph","slug":"filterNodes","params":[{"name":"graph","type":"Graph<NodeData, EdgeData>"},{"name":"predicateFn","type":"(node: GraphNode<NodeData, EdgeData>) => boolean"}],"jsDoc":{"comment":"Creates a subgraph of the passed graph. The predicate function should return true for nodes that should stay\nand false for nodes that should be skipped.","tags":[{"comment":"filterNodes(graph, predicateFn): Graph","name":null,"type":null,"tagName":"signature"},{"comment":"Target graph object","name":"graph","type":"Graph","tagName":"param"},{"comment":"A predicate function that returns a boolean value.\nMake it return true to keep the node and false to remove it from the graph.","name":"predicateFn","type":"Function","tagName":"param"},{"comment":"  const graph = createGraph()\n  addNodeInPlace(graph, { id: '1' })\n  addNodeInPlace(graph, { id: '2' })\n\n  const newGraph = filterNodes(graph, node => node.id === '2') // Keep only node with id = '2'","name":null,"type":null,"tagName":"example"}]}},{"name":"findClosestPaths","signature":"findClosestPaths(graph, params): ClosestPathResults","slug":"findClosestPaths","params":[{"name":"graph","type":"Graph<NodeData, EdgeData>"},{"name":"params","type":"Params<EdgeData>"}],"jsDoc":{"comment":"Traverses graph and precalculate the closest paths between the source node (starting point) and all other nodes.\nUse `retrieveClosestPath` and `retrieveClosestPathDistance` to get the details out of the results.","tags":[{"comment":"findClosestPaths(graph, params): ClosestPathResults","name":null,"type":null,"tagName":"signature"},{"comment":"","name":"graph","type":"Graph","tagName":"param"},{"comment":"","name":"params","type":"Params","tagName":"param"},{"comment":"The source node","name":"params.from","type":"NodeId","tagName":"param"},{"comment":"","name":"params.getDistance","type":"(edge: EdgeData) => number","tagName":"param"},{"comment":"","name":null,"type":"ClosestPathResults","tagName":"return"},{"comment":"  const results = findClosestPaths(graph, {\n    from: '1',\n    getDistance: edge => edge.weight\n  })\n  const ids = retrieveClosestPath(results, { to: '2' })","name":null,"type":null,"tagName":"example"}]}},{"name":"getAllNodeIds","signature":"getAllNodeIds(graph): NodeId[]","slug":"getAllNodeIds","params":[{"name":"graph","type":"Graph<NodeData, EdgeData>"}],"jsDoc":{"comment":"Gets a list of ids of all nodes in the graph.","tags":[{"comment":"getAllNodeIds(graph): NodeId[]","name":null,"type":null,"tagName":"signature"},{"comment":"The target graph object","name":"graph","type":"Graph","tagName":"param"},{"comment":"A list of all the node ids.","name":null,"type":"NodeId[]","tagName":"return"},{"comment":"  const ids = getAllNodeIds(graph)","name":null,"type":null,"tagName":"example"}]}},{"name":"getNeighboursOf","signature":"getNeighboursOf(graph, nodeId): NodeId[]","slug":"getNeighboursOf","params":[{"name":"graph","type":"Graph<NodeData, EdgeData>"},{"name":"nodeId","type":"NodeId"}],"jsDoc":{"comment":"Gets a list of ids of all nodes in the graph that are neighbours of the target node.\nTo consider a node as a neighbour of the target node there must be an edge from the target node to the node.","tags":[{"comment":"getNeighboursOf(graph, nodeId): NodeId[]","name":null,"type":null,"tagName":"signature"},{"comment":"","name":"graph","type":"Graph","tagName":"param"},{"comment":"Id of the target node","name":"nodeId","type":"NodeId","tagName":"param"},{"comment":"A list of ids of all the neighbour nodes","name":null,"type":"NodeId[]","tagName":"return"},{"comment":"  const ids = getNeighboursOf(graph, '1')","name":null,"type":null,"tagName":"example"}]}},{"name":"getNodeById","signature":"getNodeById(graph, id): GraphNode","slug":"getNodeById","params":[{"name":"graph","type":"Graph<NodeData, EdgeData>"},{"name":"id","type":"NodeId"}],"jsDoc":{"comment":"Gets a single node of the graph by its id.","tags":[{"comment":"getNodeById(graph, id): GraphNode","name":null,"type":null,"tagName":"signature"},{"comment":"Target graph object","name":"graph","type":"Graph","tagName":"param"},{"comment":"Id of the node to look up","name":"id","type":"NodeId","tagName":"param"},{"comment":"  const graph = createGraph()\n  addNodeInPlace(graph, { id: '1' })\n\n  const node = getNodeById(graph, '1')","name":null,"type":null,"tagName":"example"}]}},{"name":"retrieveClosestPath","signature":"retrieveClosestPath(results, params): NodeId[]","slug":"retrieveClosestPath","params":[{"name":"results","type":"ClosestPathResults"},{"name":"{ to }","type":"Params"}],"jsDoc":{"comment":null,"tags":[{"comment":"retrieveClosestPath(results, params): NodeId[]","name":null,"type":null,"tagName":"signature"},{"comment":"","name":"results","type":"ClosestPathResults","tagName":"param"},{"comment":"","name":"params","type":"Params","tagName":"param"},{"comment":"","name":"params.to","type":"NodeId","tagName":"param"},{"comment":"","name":null,"type":"NodeId[]","tagName":"return"},{"comment":"  const results = findClosestPaths(graph, {\n    from: '1',\n    getDistance: edge => edge.weight\n  })\n  const ids = retrieveClosestPath(results, { to: '2' })","name":null,"type":null,"tagName":"example"}]}},{"name":"retrieveClosestPathDistance","signature":"retrieveClosestPathDistance(results, params): number","slug":"retrieveClosestPathDistance","params":[{"name":"results","type":"ClosestPathResults"},{"name":"{ to }","type":"Params"}],"jsDoc":{"comment":null,"tags":[{"comment":"retrieveClosestPathDistance(results, params): number","name":null,"type":null,"tagName":"signature"},{"comment":"A result object returned by findClosestPath function.","name":"results","type":"ClosestPathResults","tagName":"param"},{"comment":"","name":"params","type":"Params","tagName":"param"},{"comment":"","name":"params.to","type":"NodeId","tagName":"param"},{"comment":"","name":null,"type":"number","tagName":"return"},{"comment":"  const results = findClosestPaths(graph, {\n    from: '1',\n    getDistance: edge => edge.weight\n  })\n  const distance = retrieveClosestPathDistance(results, { to: '2' })","name":null,"type":null,"tagName":"example"}]}}]}},"pageContext":{}},"staticQueryHashes":["2013491004","3649515864"]}